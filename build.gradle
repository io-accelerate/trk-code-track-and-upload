//~~~~ Settings for Gradle
buildscript {
    repositories {
        maven {
            url "https://plugins.gradle.org/m2/"
        }
        jcenter()
    }
    dependencies {
        classpath 'us.kirchmeier:gradle-capsule-plugin:1.0.2'
        classpath 'ch.netzwerg:gradle-release-plugin:1.2.4'
        classpath 'org.kordamp.gradle:jdeps-gradle-plugin:0.4.1'
    }
}

apply plugin: 'java'
apply plugin: 'application'
apply plugin: 'org.kordamp.jdeps'

group 'ro.ghionoiu'

//noinspection GroovyUnusedAssignment
targetCompatibility = JavaVersion.VERSION_1_8
//noinspection GroovyUnusedAssignment
sourceCompatibility = JavaVersion.VERSION_1_8

repositories {
    jcenter()
    mavenLocal()
}

/**
 * Design:
 * Humble-video is composed of two jar files _noarch + native.
 * The _noarch contains the API while the native jar contains
 * the JNI libraries required to interface with the Native codecs
 *
 * So:
 * - the capsule is configured to only download the artifact required for that platform
 * - the test includes all the native libraries to be cross-platform
 * - there is no native library configured for the compile target
 */
ext {
    humbleVideoVersion = '0.2.1'
    jettyVersion = '9.4.7.v20170914'
}

dependencies {
    compile ('ro.ghionoiu:dev-sourcecode-record:0.0.17') {
        exclude group: 'com.beust', module: 'jcommander'
        exclude group: 'org.apache.httpcomponents'
    }
    compile ('ro.ghionoiu:dev-screen-record:0.0.6') {
        exclude group: 'com.beust', module: 'jcommander'
        exclude group: 'org.apache.httpcomponents'
    }
    compile ('ro.ghionoiu:s3-sync-stream:0.0.12') {
        exclude group: 'com.beust', module: 'jcommander'
    }
    compile 'com.beust:jcommander:1.72'
    compile 'org.eclipse.jetty:jetty-server:'+jettyVersion
    compile 'org.eclipse.jetty:jetty-servlet:'+jettyVersion
    compile 'org.fusesource.jansi:jansi:1.8'

    compile 'org.slf4j:slf4j-api:1.7.25'
    compile 'ch.qos.logback:logback-classic:1.1.3'
    compileOnly 'org.projectlombok:lombok:1.16.16'

    // Uncomment if you run from IDE
//    compile 'io.humble:humble-video-arch-x86_64-apple-darwin12:'+humbleVideoVersion

    // The needed modules to duff the Java 9 and higher modularisation runtime error messages:
    // Java 9 and 10:
    //       java.lang.NoClassDefFoundError: javax/xml/bind/JAXBException
    //       java.lang.NoClassDefFoundError: javax/activation/JAXBException
    //
    // Java 11 and higher:
    //      Error occurred during initialization of boot layer
    //      java.lang.module.FindException: Module java.xml.bind not found
    compile 'javax.xml.bind:jaxb-api:2.2.11'
    compile 'javax.activation:activation:1.1.1'

    testCompile('junit:junit:4.11'){
        exclude group: 'org.hamcrest', module: 'hamcrest-core'
    }
    testCompile 'org.hamcrest:hamcrest-core:1.3'
    testCompile 'org.hamcrest:hamcrest-library:1.3'
    testCompileOnly 'org.projectlombok:lombok:1.16.16'
}

// ~~~~~ Packaging

apply plugin: 'us.kirchmeier.capsule'

mainClassName = "tdl.record_upload.RecordAndUploadApp"
jar {
    manifest {
        attributes "Main-Class": "$mainClassName"
    }
}

// ~~~~~ Listing dependencies using jdeps
// ~~~~~ See https://github.com/aalmiray/jdeps-gradle-plugin
// CLI examples of getting similar reports:
//   $ ./gradlew clean mavenCapsule                    <=== required to generate the uber jar
//
//   $ jdeps build/libs/record-and-upload-0.0.16-SNAPSHOT-capsule.jar
//   $ jdeps -recursive -verbose build/libs/record-and-upload-0.0.16-SNAPSHOT-capsule.jar
//   $ jdeps -cp 'build/classes/*' -verbose -profile -recursive build/libs/record-and-upload-0.0.16-SNAPSHOT-capsule.jar
//   $ jdeps -recursive -profile -verbose build/libs/record-and-upload-0.0.16-SNAPSHOT-capsule.jar
//   $ jdeps -I --api-only  --dot-output record-and-upload-deps  build/libs/record-and-upload-0.0.16-SNAPSHOT-capsule.jar
//
// Although 'jdeps' task, generates a more comprehensive report by going through the packages and modules of the project and also its direct dependencies

// How to run manually, as it is disabled by default (skips gradle build cycle)?
// 
//    $ ./gradlew clean jdeps -PenableJdeps
// or 
// 
//    $ ./gradlew clean build -PenableJdeps
//
// the above will include the 'jdeps' task as part of the gradle build cycle

jdeps {
    sourceSets = ['main', 'test']
    configurations = ['testRuntime']
    recursive = true
    failOnError = false
    consoleOutput = true
    profile = true
    verbose = true
    jdkinternals = false

    enabled = project.hasProperty("enableJdeps")
}

task mavenCapsule(type: MavenCapsule){
    applicationClass mainClassName

    capsuleManifest {
        minJavaVersion = '1.8.0'
        dependencyConfiguration configurations.compile
        repositories << 'jcenter'
//        repositories << 'local'

        //noinspection GroovyAssignabilityCheck
        platform('windows'){
            dependencies << 'io.humble:humble-video-arch-x86_64-w64-mingw32:'+humbleVideoVersion
            dependencies << 'io.humble:humble-video-arch-i686-w64-mingw32:'+humbleVideoVersion
        }
        //noinspection GroovyAssignabilityCheck
        platform('macos'){
            dependencies << 'io.humble:humble-video-arch-x86_64-apple-darwin12:'+humbleVideoVersion
            dependencies << 'io.humble:humble-video-arch-i686-apple-darwin12:'+humbleVideoVersion
        }
        //noinspection GroovyAssignabilityCheck
        platform('linux'){
            dependencies << 'io.humble:humble-video-arch-x86_64-pc-linux-gnu6:'+humbleVideoVersion
            dependencies << 'io.humble:humble-video-arch-i686-pc-linux-gnu6:'+humbleVideoVersion
        }
    }
}

//~~~~~ Release management

apply plugin: "ch.netzwerg.release"

release {
    dependsOn build // 'distZip' could e.g be used in combination with the 'application' plugin
    push = false // 'true' would e.g. be useful when triggering the release task on a CI server
    versionSuffix = '-SNAPSHOT' // '.DEV' or '' (empty) could be useful alternatives
    tagPrefix = 'v' // 'r' or '' (empty) could be useful alternatives
}
